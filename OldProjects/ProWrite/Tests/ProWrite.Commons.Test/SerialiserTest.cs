//// The following code was generated by Microsoft Visual Studio 2005.
//// The test owner should check each test for validity.
//using NUnit.Framework;
//using System;
//using System.Text;
//using System.Collections.Generic;
//using ProWrite.Core;
//using ProWrite.Entity;
//using System.IO;
//using ProWrite.Entity.Dashboard;
//namespace ProWrite.Commons.Test
//{
//    [TestFixture()]
//    public class SerialiserTest
//    {


//        [Test()]
//        public void SerializeDeserialiseTest()
//        {
//            SignInfo sign = new SignInfo();
//            sign.Name = "test";

//            DoSerializeTest<SignInfo>(sign);

//            SignGroupTree tree = new SignGroupTree();
//            tree.AddSign(sign);

//            DoSerializeTest<SignGroupTree>(tree);
//            DoSerializeTest<SignGroupTree>(MemoryDataProvider.Instance.GetEntitySet().RootGroup);
//        }

//        [Test()]
//        public void FileSerializeDeserialiseTest()
//        {
//            SignInfo sign = new SignInfo();
//            sign.Name = "test";

//            DoSerializeTest<SignInfo>(sign,"sign");

//            SignGroupTree tree = new SignGroupTree();
//            tree.AddSign(sign);

//            DoSerializeTest<SignGroupTree>(tree,"_tree");
//            DoSerializeTest<SignGroupTree>(MemoryDataProvider.Instance.GetEntitySet().RootGroup,"_tree");
//        }

//        [Test()]
//        public void SerializeDeserialiseXmlTest()
//        {
//            SignInfo sign = new SignInfo();
//            sign.Name = "test";

//           // DoSerializeXmlTest<SignInfo>(sign);
//            SignInfo actual = new SignInfo();
//            Serialiser<SignInfo> ser = Serialiser<SignInfo>.Xml;
//            using (MemoryStream stream = new MemoryStream())
//            {
//                ser.Serialize(sign, stream);

//                stream.Position = 0;
//                actual = ser.Deserialise(stream);
//            }
//            Assert.IsTrue(Equals(sign, actual));

//        }

//        /// <summary>
//        /// Xml 序列化测试
//        /// 序列化一个带有一个sign的树
//        /// </summary>
//        [Test()]
//        public void SerializeDeserialiseXmlTest1()
//        {
           

//            SignInfo sign1 = new SignInfo();
//            sign1.Name = "test1";
//            SignGroupTree tree = new SignGroupTree();
//            tree.AddSign(sign1);
//            SignGroupTree actual1 = new SignGroupTree();
//            Serialiser<SignGroupTree> ser1 = Serialiser<SignGroupTree>.Xml;
//            using (MemoryStream stream = new MemoryStream())
//            {
//                ser1.Serialize(tree, stream);

//                stream.Position = 0;
//                actual1 = ser1.Deserialise(stream);
//            }
//            actual1.PopulateRelation();
//            Assert.IsTrue(Equals(tree, actual1));
//        }


//       /// <summary>
//       /// Xml 序列化测试
//       /// 序列化一个带有一个组的树
//       /// </summary>
//       [Test()]
//       public void SerializeDeserialiseXmlTest2()
//       {


//           SignGroupInfo group = new SignGroupInfo();
//           group.Name = "test1";
//           SignGroupTree tree = new SignGroupTree();
//           tree.AddGroup(group);
//           SignGroupTree actual1 = new SignGroupTree();
//           Serialiser<SignGroupTree> ser1 = Serialiser<SignGroupTree>.Xml;
//           using (MemoryStream stream = new MemoryStream())
//           {
//               ser1.Serialize(tree, stream);

//               stream.Position = 0;
//               actual1 = ser1.Deserialise(stream);
//           }
//           actual1.PopulateRelation();
//           Assert.IsTrue(Equals(tree, actual1));

//       }

//       /// <summary>
//       /// Xml 序列化测试
//       /// 只序列化组
//       /// </summary>
//       [Test()]
//       public void SerializeDeserialiseXmlTest3()
//       {


//           SignGroupInfo group = new SignGroupInfo();
//           group.Name = "test1";
//           //SignGroupTree _tree = new SignGroupTree();
//           //_tree.AddGroup(group);
//           SignGroupInfo actual1 = new SignGroupInfo();
//           Serialiser<SignGroupInfo> ser1 = Serialiser<SignGroupInfo>.Xml;
//           using (MemoryStream stream = new MemoryStream())
//           {
//               ser1.Serialize(group, stream);

//               stream.Position = 0;
//               actual1 = ser1.Deserialise(stream);
//           }
//           //actual1.PopulateRelation();
//           Assert.IsTrue(Equals(group, actual1));

//       }

//       /// <summary>
//       /// Xml 序列化测试
//       /// 序列化一个有sign的组
//       /// </summary>
//       [Test()]
//       public void SerializeDeserialiseXmlTest4()
//       {


//           SignGroupInfo group = new SignGroupInfo();
//           group.Name = "test1";
//           SignInfo sign2 = new SignInfo();
//           sign2.Name = "sign22";
//           sign2.Parent = group;

//           SignGroupInfo actual1 = new SignGroupInfo();
//           Serialiser<SignGroupInfo> ser1 = Serialiser<SignGroupInfo>.Xml;
//           using (MemoryStream stream = new MemoryStream())
//           {
//               ser1.Serialize(group, stream);

//               stream.Position = 0;
//               actual1 = ser1.Deserialise(stream);
//           }
//           Assert.IsTrue(Equals(group, actual1));

//       }


//       /// <summary>
//       /// Xml 序列化测试
//       /// 序列化一个嵌套多个组和多个sign的数
//       /// </summary>
//       [Test()]
//       public void SerializeDeserialiseXmlTest5()
//       {


//           SignGroupInfo[] group = new SignGroupInfo[20];
//           SignGroupTree tree = new SignGroupTree();

//           for (int i = 0; i < group.Length; i++)
//           {
//               group[i] = new SignGroupInfo();
//               group[i].Name="group"+i+23;
//               SignInfo newsign1 = new SignInfo();
//               newsign1.Name = "newsign" + i;
//               if (i!=0)
//               {
//                   group[i].Parent = group[i - 1];
//                   newsign1.Parent = group[i];

//               }
//               else
//               {
//                   group[i].Parent = tree;
               
//               }
//           }
//           SignGroupTree actual1 = new SignGroupTree();
//           Serialiser<SignGroupTree> ser1 = Serialiser<SignGroupTree>.Xml;
//           using (MemoryStream stream = new MemoryStream())
//           {
//               ser1.Serialize(tree, stream);

//               stream.Position = 0;
//               actual1 = ser1.Deserialise(stream);
//           }
//           //actual1.PopulateRelation();
//           Assert.IsTrue(Equals(tree, actual1));
//           Assert.IsTrue(Equals(group[3].Name, actual1.Groups[0].Groups[0].Groups[0].Groups[0].Name));

//       }
//        //private void DoSerializeXmlTest<T>(T expected) where T : class
//        //{
//        //    Assert.IsNotNull(expected);

//        //    Serialiser<T> ser = Serialiser<T>.Xml;
//        //    using (MemoryStream stream = new MemoryStream())
//        //    {
//        //        ser.Serialize(expected, stream);

//        //        stream.Position = 0;
//        //        T actual = ser.Deserialise(stream);

         
//        //    }
//        //}

//        private void DoSerializeTest<T>(T expected) where T: class
//        {
//            Assert.IsNotNull(expected);

//            Serialiser<T> ser = Serialiser<T>.Binaray;
//            using (MemoryStream stream = new MemoryStream())
//            {
//                ser.Serialize(expected, stream);

//                stream.Position = 0;
//                T actual = ser.Deserialise(stream);

//                Assert.IsTrue(object.Equals( expected, actual));
//            }
//        }

//        private void DoSerializeTest<T>(T expected, string file) where T : class
//        {
//            Assert.IsNotNull(expected);

//            file = "d:\\" + file + ".xml";
//            Serialiser<T> ser = Serialiser<T>.Binaray;
//            ser.Serialize(expected, file);
//            T actual = ser.Deserialise(file);
//            Assert.IsTrue(object.Equals(expected, actual));
//        }

//    }


//}
